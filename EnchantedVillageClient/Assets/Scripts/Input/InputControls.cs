//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/InputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Unical.Demacs.EnchantedVillage
{
    public partial class @InputControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputControls"",
    ""maps"": [
        {
            ""name"": ""MainMap"",
            ""id"": ""345ca7d5-1e31-410c-ae98-30d99ec2d619"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""e36bcd6e-b1a9-4149-969a-5a2b5ad4e116"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDelta"",
                    ""type"": ""Value"",
                    ""id"": ""2c6bc8ad-67cb-450f-a2c3-62d8342d2f8f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""type"": ""Value"",
                    ""id"": ""91c44f54-ad2d-48f5-b43d-9d9e83095cb0"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""aababffc-8c90-4c89-b18e-6c9558c0b958"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchZoom"",
                    ""type"": ""Button"",
                    ""id"": ""247af5dd-d81c-478f-b264-1d89c78d041b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition0"",
                    ""type"": ""Value"",
                    ""id"": ""63bdd9a2-0bf0-47b0-9ffd-51304559827b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchPosition1"",
                    ""type"": ""Value"",
                    ""id"": ""c5593a3b-0c50-4dd4-8bf2-42dcef360a83"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1991d860-ed96-47e9-829c-6040701e85c5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""94ade59d-82e7-45d0-9959-e8d636d7d72b"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0762e6b2-c895-444b-a94e-200c8974a1e7"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd070ca4-757d-4ef9-ad52-88a162fab17f"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0fa73f19-c3c5-44a2-8657-f17fcb156033"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d2aa53b8-ebdd-4d69-88a4-f6d538402fd1"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""9ac61c05-9be0-4c4f-9162-629f895c3e87"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchZoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""4221dfd9-a70c-4eff-b74e-b59b6160998c"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""457faeeb-4944-4de0-89f5-a79160853da2"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6d7be305-bd5e-44a4-8cdf-e355c46881c4"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition0"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e64ba21-bec5-49d1-8b99-ebbcc4b3e8f7"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MainMap
            m_MainMap = asset.FindActionMap("MainMap", throwIfNotFound: true);
            m_MainMap_Move = m_MainMap.FindAction("Move", throwIfNotFound: true);
            m_MainMap_MoveDelta = m_MainMap.FindAction("MoveDelta", throwIfNotFound: true);
            m_MainMap_MouseScroll = m_MainMap.FindAction("MouseScroll", throwIfNotFound: true);
            m_MainMap_MousePosition = m_MainMap.FindAction("MousePosition", throwIfNotFound: true);
            m_MainMap_TouchZoom = m_MainMap.FindAction("TouchZoom", throwIfNotFound: true);
            m_MainMap_TouchPosition0 = m_MainMap.FindAction("TouchPosition0", throwIfNotFound: true);
            m_MainMap_TouchPosition1 = m_MainMap.FindAction("TouchPosition1", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MainMap
        private readonly InputActionMap m_MainMap;
        private List<IMainMapActions> m_MainMapActionsCallbackInterfaces = new List<IMainMapActions>();
        private readonly InputAction m_MainMap_Move;
        private readonly InputAction m_MainMap_MoveDelta;
        private readonly InputAction m_MainMap_MouseScroll;
        private readonly InputAction m_MainMap_MousePosition;
        private readonly InputAction m_MainMap_TouchZoom;
        private readonly InputAction m_MainMap_TouchPosition0;
        private readonly InputAction m_MainMap_TouchPosition1;
        public struct MainMapActions
        {
            private @InputControls m_Wrapper;
            public MainMapActions(@InputControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_MainMap_Move;
            public InputAction @MoveDelta => m_Wrapper.m_MainMap_MoveDelta;
            public InputAction @MouseScroll => m_Wrapper.m_MainMap_MouseScroll;
            public InputAction @MousePosition => m_Wrapper.m_MainMap_MousePosition;
            public InputAction @TouchZoom => m_Wrapper.m_MainMap_TouchZoom;
            public InputAction @TouchPosition0 => m_Wrapper.m_MainMap_TouchPosition0;
            public InputAction @TouchPosition1 => m_Wrapper.m_MainMap_TouchPosition1;
            public InputActionMap Get() { return m_Wrapper.m_MainMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainMapActions set) { return set.Get(); }
            public void AddCallbacks(IMainMapActions instance)
            {
                if (instance == null || m_Wrapper.m_MainMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainMapActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @MoveDelta.started += instance.OnMoveDelta;
                @MoveDelta.performed += instance.OnMoveDelta;
                @MoveDelta.canceled += instance.OnMoveDelta;
                @MouseScroll.started += instance.OnMouseScroll;
                @MouseScroll.performed += instance.OnMouseScroll;
                @MouseScroll.canceled += instance.OnMouseScroll;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @TouchZoom.started += instance.OnTouchZoom;
                @TouchZoom.performed += instance.OnTouchZoom;
                @TouchZoom.canceled += instance.OnTouchZoom;
                @TouchPosition0.started += instance.OnTouchPosition0;
                @TouchPosition0.performed += instance.OnTouchPosition0;
                @TouchPosition0.canceled += instance.OnTouchPosition0;
                @TouchPosition1.started += instance.OnTouchPosition1;
                @TouchPosition1.performed += instance.OnTouchPosition1;
                @TouchPosition1.canceled += instance.OnTouchPosition1;
            }

            private void UnregisterCallbacks(IMainMapActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @MoveDelta.started -= instance.OnMoveDelta;
                @MoveDelta.performed -= instance.OnMoveDelta;
                @MoveDelta.canceled -= instance.OnMoveDelta;
                @MouseScroll.started -= instance.OnMouseScroll;
                @MouseScroll.performed -= instance.OnMouseScroll;
                @MouseScroll.canceled -= instance.OnMouseScroll;
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
                @TouchZoom.started -= instance.OnTouchZoom;
                @TouchZoom.performed -= instance.OnTouchZoom;
                @TouchZoom.canceled -= instance.OnTouchZoom;
                @TouchPosition0.started -= instance.OnTouchPosition0;
                @TouchPosition0.performed -= instance.OnTouchPosition0;
                @TouchPosition0.canceled -= instance.OnTouchPosition0;
                @TouchPosition1.started -= instance.OnTouchPosition1;
                @TouchPosition1.performed -= instance.OnTouchPosition1;
                @TouchPosition1.canceled -= instance.OnTouchPosition1;
            }

            public void RemoveCallbacks(IMainMapActions instance)
            {
                if (m_Wrapper.m_MainMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMainMapActions instance)
            {
                foreach (var item in m_Wrapper.m_MainMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MainMapActions @MainMap => new MainMapActions(this);
        public interface IMainMapActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnMoveDelta(InputAction.CallbackContext context);
            void OnMouseScroll(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
            void OnTouchZoom(InputAction.CallbackContext context);
            void OnTouchPosition0(InputAction.CallbackContext context);
            void OnTouchPosition1(InputAction.CallbackContext context);
        }
    }
}
